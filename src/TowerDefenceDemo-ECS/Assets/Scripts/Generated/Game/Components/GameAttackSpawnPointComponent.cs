//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAttackSpawnPoint;

    public static Entitas.IMatcher<GameEntity> AttackSpawnPoint {
        get {
            if (_matcherAttackSpawnPoint == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AttackSpawnPoint);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAttackSpawnPoint = matcher;
            }

            return _matcherAttackSpawnPoint;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Gameplay.Towers.AttackSpawnPoint attackSpawnPoint { get { return (Gameplay.Towers.AttackSpawnPoint)GetComponent(GameComponentsLookup.AttackSpawnPoint); } }
    public UnityEngine.Transform AttackSpawnPoint { get { return attackSpawnPoint.Value; } }
    public bool hasAttackSpawnPoint { get { return HasComponent(GameComponentsLookup.AttackSpawnPoint); } }

    public GameEntity AddAttackSpawnPoint(UnityEngine.Transform newValue) {
        var index = GameComponentsLookup.AttackSpawnPoint;
        var component = (Gameplay.Towers.AttackSpawnPoint)CreateComponent(index, typeof(Gameplay.Towers.AttackSpawnPoint));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAttackSpawnPoint(UnityEngine.Transform newValue) {
        var index = GameComponentsLookup.AttackSpawnPoint;
        var component = (Gameplay.Towers.AttackSpawnPoint)CreateComponent(index, typeof(Gameplay.Towers.AttackSpawnPoint));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAttackSpawnPoint() {
        RemoveComponent(GameComponentsLookup.AttackSpawnPoint);
        return this;
    }
}
