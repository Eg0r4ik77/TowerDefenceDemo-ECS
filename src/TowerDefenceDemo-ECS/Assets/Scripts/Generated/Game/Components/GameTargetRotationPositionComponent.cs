//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTargetRotationPosition;

    public static Entitas.IMatcher<GameEntity> TargetRotationPosition {
        get {
            if (_matcherTargetRotationPosition == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TargetRotationPosition);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTargetRotationPosition = matcher;
            }

            return _matcherTargetRotationPosition;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Gameplay.Movement.TargetRotationPosition targetRotationPosition { get { return (Gameplay.Movement.TargetRotationPosition)GetComponent(GameComponentsLookup.TargetRotationPosition); } }
    public UnityEngine.Vector3 TargetRotationPosition { get { return targetRotationPosition.Value; } }
    public bool hasTargetRotationPosition { get { return HasComponent(GameComponentsLookup.TargetRotationPosition); } }

    public GameEntity AddTargetRotationPosition(UnityEngine.Vector3 newValue) {
        var index = GameComponentsLookup.TargetRotationPosition;
        var component = (Gameplay.Movement.TargetRotationPosition)CreateComponent(index, typeof(Gameplay.Movement.TargetRotationPosition));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTargetRotationPosition(UnityEngine.Vector3 newValue) {
        var index = GameComponentsLookup.TargetRotationPosition;
        var component = (Gameplay.Movement.TargetRotationPosition)CreateComponent(index, typeof(Gameplay.Movement.TargetRotationPosition));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTargetRotationPosition() {
        RemoveComponent(GameComponentsLookup.TargetRotationPosition);
        return this;
    }
}
