//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRotationDelay;

    public static Entitas.IMatcher<GameEntity> RotationDelay {
        get {
            if (_matcherRotationDelay == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.RotationDelay);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRotationDelay = matcher;
            }

            return _matcherRotationDelay;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Gameplay.Towers.RotationDelay rotationDelay { get { return (Gameplay.Towers.RotationDelay)GetComponent(GameComponentsLookup.RotationDelay); } }
    public float RotationDelay { get { return rotationDelay.Value; } }
    public bool hasRotationDelay { get { return HasComponent(GameComponentsLookup.RotationDelay); } }

    public GameEntity AddRotationDelay(float newValue) {
        var index = GameComponentsLookup.RotationDelay;
        var component = (Gameplay.Towers.RotationDelay)CreateComponent(index, typeof(Gameplay.Towers.RotationDelay));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceRotationDelay(float newValue) {
        var index = GameComponentsLookup.RotationDelay;
        var component = (Gameplay.Towers.RotationDelay)CreateComponent(index, typeof(Gameplay.Towers.RotationDelay));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveRotationDelay() {
        RemoveComponent(GameComponentsLookup.RotationDelay);
        return this;
    }
}
