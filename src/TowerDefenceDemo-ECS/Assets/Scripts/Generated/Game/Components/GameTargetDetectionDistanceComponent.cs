//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTargetDetectionDistance;

    public static Entitas.IMatcher<GameEntity> TargetDetectionDistance {
        get {
            if (_matcherTargetDetectionDistance == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TargetDetectionDistance);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTargetDetectionDistance = matcher;
            }

            return _matcherTargetDetectionDistance;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Gameplay.TargetDetection.TargetDetectionDistance targetDetectionDistance { get { return (Gameplay.TargetDetection.TargetDetectionDistance)GetComponent(GameComponentsLookup.TargetDetectionDistance); } }
    public float TargetDetectionDistance { get { return targetDetectionDistance.Value; } }
    public bool hasTargetDetectionDistance { get { return HasComponent(GameComponentsLookup.TargetDetectionDistance); } }

    public GameEntity AddTargetDetectionDistance(float newValue) {
        var index = GameComponentsLookup.TargetDetectionDistance;
        var component = (Gameplay.TargetDetection.TargetDetectionDistance)CreateComponent(index, typeof(Gameplay.TargetDetection.TargetDetectionDistance));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTargetDetectionDistance(float newValue) {
        var index = GameComponentsLookup.TargetDetectionDistance;
        var component = (Gameplay.TargetDetection.TargetDetectionDistance)CreateComponent(index, typeof(Gameplay.TargetDetection.TargetDetectionDistance));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTargetDetectionDistance() {
        RemoveComponent(GameComponentsLookup.TargetDetectionDistance);
        return this;
    }
}
