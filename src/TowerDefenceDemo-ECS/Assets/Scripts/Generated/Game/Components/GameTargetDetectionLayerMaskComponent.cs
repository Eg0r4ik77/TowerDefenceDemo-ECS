//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTargetDetectionLayerMask;

    public static Entitas.IMatcher<GameEntity> TargetDetectionLayerMask {
        get {
            if (_matcherTargetDetectionLayerMask == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TargetDetectionLayerMask);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTargetDetectionLayerMask = matcher;
            }

            return _matcherTargetDetectionLayerMask;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Gameplay.TargetDetection.TargetDetectionLayerMask targetDetectionLayerMask { get { return (Gameplay.TargetDetection.TargetDetectionLayerMask)GetComponent(GameComponentsLookup.TargetDetectionLayerMask); } }
    public int TargetDetectionLayerMask { get { return targetDetectionLayerMask.Value; } }
    public bool hasTargetDetectionLayerMask { get { return HasComponent(GameComponentsLookup.TargetDetectionLayerMask); } }

    public GameEntity AddTargetDetectionLayerMask(int newValue) {
        var index = GameComponentsLookup.TargetDetectionLayerMask;
        var component = (Gameplay.TargetDetection.TargetDetectionLayerMask)CreateComponent(index, typeof(Gameplay.TargetDetection.TargetDetectionLayerMask));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTargetDetectionLayerMask(int newValue) {
        var index = GameComponentsLookup.TargetDetectionLayerMask;
        var component = (Gameplay.TargetDetection.TargetDetectionLayerMask)CreateComponent(index, typeof(Gameplay.TargetDetection.TargetDetectionLayerMask));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTargetDetectionLayerMask() {
        RemoveComponent(GameComponentsLookup.TargetDetectionLayerMask);
        return this;
    }
}
